
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  created: Date
  auth_token: string
  updated: Date
  email: string | null
  username: string | null
  password: string | null
  subscription: Subscription
  salt: string | null
  premium_expiry: Date | null
  plus_expiry: Date | null
}

/**
 * Model Key
 * 
 */
export type Key = {
  id: string
  subscription: Subscription
  key: string
  created: Date
}

/**
 * Model IPServer
 * 
 */
export type IPServer = {
  id: string
  ownerId: string
  created: Date
  updated: Date
  nickname: string | null
  ip_address: string | null
  status: string
}

/**
 * Model EmailVerification
 * 
 */
export type EmailVerification = {
  id: string
  username: string | null
  email: string | null
  password: string | null
  salt: string | null
  ip: string | null
  code: string | null
}

/**
 * Model ForgotPassword
 * 
 */
export type ForgotPassword = {
  id: string
  email: string | null
  ip: string | null
  code: string | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Subscription: {
  FREE: 'FREE',
  PLUS: 'PLUS',
  PREMIUM: 'PREMIUM'
};

export type Subscription = (typeof Subscription)[keyof typeof Subscription]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.key`: Exposes CRUD operations for the **Key** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keys
    * const keys = await prisma.key.findMany()
    * ```
    */
  get key(): Prisma.KeyDelegate<GlobalReject>;

  /**
   * `prisma.iPServer`: Exposes CRUD operations for the **IPServer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IPServers
    * const iPServers = await prisma.iPServer.findMany()
    * ```
    */
  get iPServer(): Prisma.IPServerDelegate<GlobalReject>;

  /**
   * `prisma.emailVerification`: Exposes CRUD operations for the **EmailVerification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailVerifications
    * const emailVerifications = await prisma.emailVerification.findMany()
    * ```
    */
  get emailVerification(): Prisma.EmailVerificationDelegate<GlobalReject>;

  /**
   * `prisma.forgotPassword`: Exposes CRUD operations for the **ForgotPassword** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ForgotPasswords
    * const forgotPasswords = await prisma.forgotPassword.findMany()
    * ```
    */
  get forgotPassword(): Prisma.ForgotPasswordDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Extensions
   */
  export type Extension = runtime.Extension 

  /**
   * Prisma Client JS version: 4.5.0
   * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Key: 'Key',
    IPServer: 'IPServer',
    EmailVerification: 'EmailVerification',
    ForgotPassword: 'ForgotPassword'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    ip_servers: number
  }

  export type UserCountOutputTypeSelect = {
    ip_servers?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    created: Date | null
    auth_token: string | null
    updated: Date | null
    email: string | null
    username: string | null
    password: string | null
    subscription: Subscription | null
    salt: string | null
    premium_expiry: Date | null
    plus_expiry: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    created: Date | null
    auth_token: string | null
    updated: Date | null
    email: string | null
    username: string | null
    password: string | null
    subscription: Subscription | null
    salt: string | null
    premium_expiry: Date | null
    plus_expiry: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    created: number
    auth_token: number
    updated: number
    email: number
    username: number
    password: number
    subscription: number
    salt: number
    premium_expiry: number
    plus_expiry: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    created?: true
    auth_token?: true
    updated?: true
    email?: true
    username?: true
    password?: true
    subscription?: true
    salt?: true
    premium_expiry?: true
    plus_expiry?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    created?: true
    auth_token?: true
    updated?: true
    email?: true
    username?: true
    password?: true
    subscription?: true
    salt?: true
    premium_expiry?: true
    plus_expiry?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    created?: true
    auth_token?: true
    updated?: true
    email?: true
    username?: true
    password?: true
    subscription?: true
    salt?: true
    premium_expiry?: true
    plus_expiry?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    created: Date
    auth_token: string
    updated: Date
    email: string | null
    username: string | null
    password: string | null
    subscription: Subscription
    salt: string | null
    premium_expiry: Date | null
    plus_expiry: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    created?: boolean
    auth_token?: boolean
    updated?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    subscription?: boolean
    salt?: boolean
    ip_servers?: boolean | IPServerFindManyArgs
    premium_expiry?: boolean
    plus_expiry?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    ip_servers?: boolean | IPServerFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ip_servers' ? Array < IPServerGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ip_servers' ? Array < IPServerGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ip_servers<T extends IPServerFindManyArgs = {}>(args?: Subset<T, IPServerFindManyArgs>): CheckSelect<T, PrismaPromise<Array<IPServer>| Null>, PrismaPromise<Array<IPServerGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Key
   */


  export type AggregateKey = {
    _count: KeyCountAggregateOutputType | null
    _min: KeyMinAggregateOutputType | null
    _max: KeyMaxAggregateOutputType | null
  }

  export type KeyMinAggregateOutputType = {
    id: string | null
    subscription: Subscription | null
    key: string | null
    created: Date | null
  }

  export type KeyMaxAggregateOutputType = {
    id: string | null
    subscription: Subscription | null
    key: string | null
    created: Date | null
  }

  export type KeyCountAggregateOutputType = {
    id: number
    subscription: number
    key: number
    created: number
    _all: number
  }


  export type KeyMinAggregateInputType = {
    id?: true
    subscription?: true
    key?: true
    created?: true
  }

  export type KeyMaxAggregateInputType = {
    id?: true
    subscription?: true
    key?: true
    created?: true
  }

  export type KeyCountAggregateInputType = {
    id?: true
    subscription?: true
    key?: true
    created?: true
    _all?: true
  }

  export type KeyAggregateArgs = {
    /**
     * Filter which Key to aggregate.
     * 
    **/
    where?: KeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keys to fetch.
     * 
    **/
    orderBy?: Enumerable<KeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: KeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keys.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Keys
    **/
    _count?: true | KeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeyMaxAggregateInputType
  }

  export type GetKeyAggregateType<T extends KeyAggregateArgs> = {
        [P in keyof T & keyof AggregateKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKey[P]>
      : GetScalarType<T[P], AggregateKey[P]>
  }




  export type KeyGroupByArgs = {
    where?: KeyWhereInput
    orderBy?: Enumerable<KeyOrderByWithAggregationInput>
    by: Array<KeyScalarFieldEnum>
    having?: KeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeyCountAggregateInputType | true
    _min?: KeyMinAggregateInputType
    _max?: KeyMaxAggregateInputType
  }


  export type KeyGroupByOutputType = {
    id: string
    subscription: Subscription
    key: string
    created: Date
    _count: KeyCountAggregateOutputType | null
    _min: KeyMinAggregateOutputType | null
    _max: KeyMaxAggregateOutputType | null
  }

  type GetKeyGroupByPayload<T extends KeyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<KeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeyGroupByOutputType[P]>
            : GetScalarType<T[P], KeyGroupByOutputType[P]>
        }
      >
    >


  export type KeySelect = {
    id?: boolean
    subscription?: boolean
    key?: boolean
    created?: boolean
  }

  export type KeyGetPayload<
    S extends boolean | null | undefined | KeyArgs,
    U = keyof S
      > = S extends true
        ? Key
    : S extends undefined
    ? never
    : S extends KeyArgs | KeyFindManyArgs
    ?'include' extends U
    ? Key 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Key ? Key[P] : never
  } 
    : Key
  : Key


  type KeyCountArgs = Merge<
    Omit<KeyFindManyArgs, 'select' | 'include'> & {
      select?: KeyCountAggregateInputType | true
    }
  >

  export interface KeyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Key that matches the filter.
     * @param {KeyFindUniqueArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KeyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, KeyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Key'> extends True ? CheckSelect<T, Prisma__KeyClient<Key>, Prisma__KeyClient<KeyGetPayload<T>>> : CheckSelect<T, Prisma__KeyClient<Key | null, null>, Prisma__KeyClient<KeyGetPayload<T> | null, null>>

    /**
     * Find the first Key that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyFindFirstArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KeyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, KeyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Key'> extends True ? CheckSelect<T, Prisma__KeyClient<Key>, Prisma__KeyClient<KeyGetPayload<T>>> : CheckSelect<T, Prisma__KeyClient<Key | null, null>, Prisma__KeyClient<KeyGetPayload<T> | null, null>>

    /**
     * Find zero or more Keys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keys
     * const keys = await prisma.key.findMany()
     * 
     * // Get first 10 Keys
     * const keys = await prisma.key.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keyWithIdOnly = await prisma.key.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KeyFindManyArgs>(
      args?: SelectSubset<T, KeyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Key>>, PrismaPromise<Array<KeyGetPayload<T>>>>

    /**
     * Create a Key.
     * @param {KeyCreateArgs} args - Arguments to create a Key.
     * @example
     * // Create one Key
     * const Key = await prisma.key.create({
     *   data: {
     *     // ... data to create a Key
     *   }
     * })
     * 
    **/
    create<T extends KeyCreateArgs>(
      args: SelectSubset<T, KeyCreateArgs>
    ): CheckSelect<T, Prisma__KeyClient<Key>, Prisma__KeyClient<KeyGetPayload<T>>>

    /**
     * Create many Keys.
     *     @param {KeyCreateManyArgs} args - Arguments to create many Keys.
     *     @example
     *     // Create many Keys
     *     const key = await prisma.key.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KeyCreateManyArgs>(
      args?: SelectSubset<T, KeyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Key.
     * @param {KeyDeleteArgs} args - Arguments to delete one Key.
     * @example
     * // Delete one Key
     * const Key = await prisma.key.delete({
     *   where: {
     *     // ... filter to delete one Key
     *   }
     * })
     * 
    **/
    delete<T extends KeyDeleteArgs>(
      args: SelectSubset<T, KeyDeleteArgs>
    ): CheckSelect<T, Prisma__KeyClient<Key>, Prisma__KeyClient<KeyGetPayload<T>>>

    /**
     * Update one Key.
     * @param {KeyUpdateArgs} args - Arguments to update one Key.
     * @example
     * // Update one Key
     * const key = await prisma.key.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KeyUpdateArgs>(
      args: SelectSubset<T, KeyUpdateArgs>
    ): CheckSelect<T, Prisma__KeyClient<Key>, Prisma__KeyClient<KeyGetPayload<T>>>

    /**
     * Delete zero or more Keys.
     * @param {KeyDeleteManyArgs} args - Arguments to filter Keys to delete.
     * @example
     * // Delete a few Keys
     * const { count } = await prisma.key.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KeyDeleteManyArgs>(
      args?: SelectSubset<T, KeyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keys
     * const key = await prisma.key.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KeyUpdateManyArgs>(
      args: SelectSubset<T, KeyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Key.
     * @param {KeyUpsertArgs} args - Arguments to update or create a Key.
     * @example
     * // Update or create a Key
     * const key = await prisma.key.upsert({
     *   create: {
     *     // ... data to create a Key
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Key we want to update
     *   }
     * })
    **/
    upsert<T extends KeyUpsertArgs>(
      args: SelectSubset<T, KeyUpsertArgs>
    ): CheckSelect<T, Prisma__KeyClient<Key>, Prisma__KeyClient<KeyGetPayload<T>>>

    /**
     * Find one Key that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {KeyFindUniqueOrThrowArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KeyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, KeyFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__KeyClient<Key>, Prisma__KeyClient<KeyGetPayload<T>>>

    /**
     * Find the first Key that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyFindFirstOrThrowArgs} args - Arguments to find a Key
     * @example
     * // Get one Key
     * const key = await prisma.key.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KeyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, KeyFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__KeyClient<Key>, Prisma__KeyClient<KeyGetPayload<T>>>

    /**
     * Count the number of Keys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyCountArgs} args - Arguments to filter Keys to count.
     * @example
     * // Count the number of Keys
     * const count = await prisma.key.count({
     *   where: {
     *     // ... the filter for the Keys we want to count
     *   }
     * })
    **/
    count<T extends KeyCountArgs>(
      args?: Subset<T, KeyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Key.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeyAggregateArgs>(args: Subset<T, KeyAggregateArgs>): PrismaPromise<GetKeyAggregateType<T>>

    /**
     * Group by Key.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeyGroupByArgs['orderBy'] }
        : { orderBy?: KeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeyGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Key.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__KeyClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Key base type for findUnique actions
   */
  export type KeyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Key
     * 
    **/
    select?: KeySelect | null
    /**
     * Filter, which Key to fetch.
     * 
    **/
    where: KeyWhereUniqueInput
  }

  /**
   * Key: findUnique
   */
  export interface KeyFindUniqueArgs extends KeyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Key base type for findFirst actions
   */
  export type KeyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Key
     * 
    **/
    select?: KeySelect | null
    /**
     * Filter, which Key to fetch.
     * 
    **/
    where?: KeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keys to fetch.
     * 
    **/
    orderBy?: Enumerable<KeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keys.
     * 
    **/
    cursor?: KeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keys.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keys.
     * 
    **/
    distinct?: Enumerable<KeyScalarFieldEnum>
  }

  /**
   * Key: findFirst
   */
  export interface KeyFindFirstArgs extends KeyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Key findMany
   */
  export type KeyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Key
     * 
    **/
    select?: KeySelect | null
    /**
     * Filter, which Keys to fetch.
     * 
    **/
    where?: KeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keys to fetch.
     * 
    **/
    orderBy?: Enumerable<KeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Keys.
     * 
    **/
    cursor?: KeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keys.
     * 
    **/
    skip?: number
    distinct?: Enumerable<KeyScalarFieldEnum>
  }


  /**
   * Key create
   */
  export type KeyCreateArgs = {
    /**
     * Select specific fields to fetch from the Key
     * 
    **/
    select?: KeySelect | null
    /**
     * The data needed to create a Key.
     * 
    **/
    data: XOR<KeyCreateInput, KeyUncheckedCreateInput>
  }


  /**
   * Key createMany
   */
  export type KeyCreateManyArgs = {
    /**
     * The data used to create many Keys.
     * 
    **/
    data: Enumerable<KeyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Key update
   */
  export type KeyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Key
     * 
    **/
    select?: KeySelect | null
    /**
     * The data needed to update a Key.
     * 
    **/
    data: XOR<KeyUpdateInput, KeyUncheckedUpdateInput>
    /**
     * Choose, which Key to update.
     * 
    **/
    where: KeyWhereUniqueInput
  }


  /**
   * Key updateMany
   */
  export type KeyUpdateManyArgs = {
    /**
     * The data used to update Keys.
     * 
    **/
    data: XOR<KeyUpdateManyMutationInput, KeyUncheckedUpdateManyInput>
    /**
     * Filter which Keys to update
     * 
    **/
    where?: KeyWhereInput
  }


  /**
   * Key upsert
   */
  export type KeyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Key
     * 
    **/
    select?: KeySelect | null
    /**
     * The filter to search for the Key to update in case it exists.
     * 
    **/
    where: KeyWhereUniqueInput
    /**
     * In case the Key found by the `where` argument doesn't exist, create a new Key with this data.
     * 
    **/
    create: XOR<KeyCreateInput, KeyUncheckedCreateInput>
    /**
     * In case the Key was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<KeyUpdateInput, KeyUncheckedUpdateInput>
  }


  /**
   * Key delete
   */
  export type KeyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Key
     * 
    **/
    select?: KeySelect | null
    /**
     * Filter which Key to delete.
     * 
    **/
    where: KeyWhereUniqueInput
  }


  /**
   * Key deleteMany
   */
  export type KeyDeleteManyArgs = {
    /**
     * Filter which Keys to delete
     * 
    **/
    where?: KeyWhereInput
  }


  /**
   * Key: findUniqueOrThrow
   */
  export type KeyFindUniqueOrThrowArgs = KeyFindUniqueArgsBase
      

  /**
   * Key: findFirstOrThrow
   */
  export type KeyFindFirstOrThrowArgs = KeyFindFirstArgsBase
      

  /**
   * Key without action
   */
  export type KeyArgs = {
    /**
     * Select specific fields to fetch from the Key
     * 
    **/
    select?: KeySelect | null
  }



  /**
   * Model IPServer
   */


  export type AggregateIPServer = {
    _count: IPServerCountAggregateOutputType | null
    _min: IPServerMinAggregateOutputType | null
    _max: IPServerMaxAggregateOutputType | null
  }

  export type IPServerMinAggregateOutputType = {
    id: string | null
    ownerId: string | null
    created: Date | null
    updated: Date | null
    nickname: string | null
    ip_address: string | null
    status: string | null
  }

  export type IPServerMaxAggregateOutputType = {
    id: string | null
    ownerId: string | null
    created: Date | null
    updated: Date | null
    nickname: string | null
    ip_address: string | null
    status: string | null
  }

  export type IPServerCountAggregateOutputType = {
    id: number
    ownerId: number
    created: number
    updated: number
    nickname: number
    ip_address: number
    status: number
    _all: number
  }


  export type IPServerMinAggregateInputType = {
    id?: true
    ownerId?: true
    created?: true
    updated?: true
    nickname?: true
    ip_address?: true
    status?: true
  }

  export type IPServerMaxAggregateInputType = {
    id?: true
    ownerId?: true
    created?: true
    updated?: true
    nickname?: true
    ip_address?: true
    status?: true
  }

  export type IPServerCountAggregateInputType = {
    id?: true
    ownerId?: true
    created?: true
    updated?: true
    nickname?: true
    ip_address?: true
    status?: true
    _all?: true
  }

  export type IPServerAggregateArgs = {
    /**
     * Filter which IPServer to aggregate.
     * 
    **/
    where?: IPServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IPServers to fetch.
     * 
    **/
    orderBy?: Enumerable<IPServerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: IPServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IPServers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IPServers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IPServers
    **/
    _count?: true | IPServerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IPServerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IPServerMaxAggregateInputType
  }

  export type GetIPServerAggregateType<T extends IPServerAggregateArgs> = {
        [P in keyof T & keyof AggregateIPServer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIPServer[P]>
      : GetScalarType<T[P], AggregateIPServer[P]>
  }




  export type IPServerGroupByArgs = {
    where?: IPServerWhereInput
    orderBy?: Enumerable<IPServerOrderByWithAggregationInput>
    by: Array<IPServerScalarFieldEnum>
    having?: IPServerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IPServerCountAggregateInputType | true
    _min?: IPServerMinAggregateInputType
    _max?: IPServerMaxAggregateInputType
  }


  export type IPServerGroupByOutputType = {
    id: string
    ownerId: string
    created: Date
    updated: Date
    nickname: string | null
    ip_address: string | null
    status: string
    _count: IPServerCountAggregateOutputType | null
    _min: IPServerMinAggregateOutputType | null
    _max: IPServerMaxAggregateOutputType | null
  }

  type GetIPServerGroupByPayload<T extends IPServerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<IPServerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IPServerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IPServerGroupByOutputType[P]>
            : GetScalarType<T[P], IPServerGroupByOutputType[P]>
        }
      >
    >


  export type IPServerSelect = {
    id?: boolean
    ownerId?: boolean
    created?: boolean
    updated?: boolean
    nickname?: boolean
    ip_address?: boolean
    owner?: boolean | UserArgs
    status?: boolean
  }

  export type IPServerInclude = {
    owner?: boolean | UserArgs
  }

  export type IPServerGetPayload<
    S extends boolean | null | undefined | IPServerArgs,
    U = keyof S
      > = S extends true
        ? IPServer
    : S extends undefined
    ? never
    : S extends IPServerArgs | IPServerFindManyArgs
    ?'include' extends U
    ? IPServer  & {
    [P in TrueKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof IPServer ? IPServer[P] : never
  } 
    : IPServer
  : IPServer


  type IPServerCountArgs = Merge<
    Omit<IPServerFindManyArgs, 'select' | 'include'> & {
      select?: IPServerCountAggregateInputType | true
    }
  >

  export interface IPServerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one IPServer that matches the filter.
     * @param {IPServerFindUniqueArgs} args - Arguments to find a IPServer
     * @example
     * // Get one IPServer
     * const iPServer = await prisma.iPServer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IPServerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, IPServerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'IPServer'> extends True ? CheckSelect<T, Prisma__IPServerClient<IPServer>, Prisma__IPServerClient<IPServerGetPayload<T>>> : CheckSelect<T, Prisma__IPServerClient<IPServer | null, null>, Prisma__IPServerClient<IPServerGetPayload<T> | null, null>>

    /**
     * Find the first IPServer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPServerFindFirstArgs} args - Arguments to find a IPServer
     * @example
     * // Get one IPServer
     * const iPServer = await prisma.iPServer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IPServerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, IPServerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'IPServer'> extends True ? CheckSelect<T, Prisma__IPServerClient<IPServer>, Prisma__IPServerClient<IPServerGetPayload<T>>> : CheckSelect<T, Prisma__IPServerClient<IPServer | null, null>, Prisma__IPServerClient<IPServerGetPayload<T> | null, null>>

    /**
     * Find zero or more IPServers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPServerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IPServers
     * const iPServers = await prisma.iPServer.findMany()
     * 
     * // Get first 10 IPServers
     * const iPServers = await prisma.iPServer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const iPServerWithIdOnly = await prisma.iPServer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends IPServerFindManyArgs>(
      args?: SelectSubset<T, IPServerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<IPServer>>, PrismaPromise<Array<IPServerGetPayload<T>>>>

    /**
     * Create a IPServer.
     * @param {IPServerCreateArgs} args - Arguments to create a IPServer.
     * @example
     * // Create one IPServer
     * const IPServer = await prisma.iPServer.create({
     *   data: {
     *     // ... data to create a IPServer
     *   }
     * })
     * 
    **/
    create<T extends IPServerCreateArgs>(
      args: SelectSubset<T, IPServerCreateArgs>
    ): CheckSelect<T, Prisma__IPServerClient<IPServer>, Prisma__IPServerClient<IPServerGetPayload<T>>>

    /**
     * Create many IPServers.
     *     @param {IPServerCreateManyArgs} args - Arguments to create many IPServers.
     *     @example
     *     // Create many IPServers
     *     const iPServer = await prisma.iPServer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IPServerCreateManyArgs>(
      args?: SelectSubset<T, IPServerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a IPServer.
     * @param {IPServerDeleteArgs} args - Arguments to delete one IPServer.
     * @example
     * // Delete one IPServer
     * const IPServer = await prisma.iPServer.delete({
     *   where: {
     *     // ... filter to delete one IPServer
     *   }
     * })
     * 
    **/
    delete<T extends IPServerDeleteArgs>(
      args: SelectSubset<T, IPServerDeleteArgs>
    ): CheckSelect<T, Prisma__IPServerClient<IPServer>, Prisma__IPServerClient<IPServerGetPayload<T>>>

    /**
     * Update one IPServer.
     * @param {IPServerUpdateArgs} args - Arguments to update one IPServer.
     * @example
     * // Update one IPServer
     * const iPServer = await prisma.iPServer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IPServerUpdateArgs>(
      args: SelectSubset<T, IPServerUpdateArgs>
    ): CheckSelect<T, Prisma__IPServerClient<IPServer>, Prisma__IPServerClient<IPServerGetPayload<T>>>

    /**
     * Delete zero or more IPServers.
     * @param {IPServerDeleteManyArgs} args - Arguments to filter IPServers to delete.
     * @example
     * // Delete a few IPServers
     * const { count } = await prisma.iPServer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IPServerDeleteManyArgs>(
      args?: SelectSubset<T, IPServerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more IPServers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPServerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IPServers
     * const iPServer = await prisma.iPServer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IPServerUpdateManyArgs>(
      args: SelectSubset<T, IPServerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one IPServer.
     * @param {IPServerUpsertArgs} args - Arguments to update or create a IPServer.
     * @example
     * // Update or create a IPServer
     * const iPServer = await prisma.iPServer.upsert({
     *   create: {
     *     // ... data to create a IPServer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IPServer we want to update
     *   }
     * })
    **/
    upsert<T extends IPServerUpsertArgs>(
      args: SelectSubset<T, IPServerUpsertArgs>
    ): CheckSelect<T, Prisma__IPServerClient<IPServer>, Prisma__IPServerClient<IPServerGetPayload<T>>>

    /**
     * Find one IPServer that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {IPServerFindUniqueOrThrowArgs} args - Arguments to find a IPServer
     * @example
     * // Get one IPServer
     * const iPServer = await prisma.iPServer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IPServerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, IPServerFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__IPServerClient<IPServer>, Prisma__IPServerClient<IPServerGetPayload<T>>>

    /**
     * Find the first IPServer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPServerFindFirstOrThrowArgs} args - Arguments to find a IPServer
     * @example
     * // Get one IPServer
     * const iPServer = await prisma.iPServer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IPServerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, IPServerFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__IPServerClient<IPServer>, Prisma__IPServerClient<IPServerGetPayload<T>>>

    /**
     * Count the number of IPServers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPServerCountArgs} args - Arguments to filter IPServers to count.
     * @example
     * // Count the number of IPServers
     * const count = await prisma.iPServer.count({
     *   where: {
     *     // ... the filter for the IPServers we want to count
     *   }
     * })
    **/
    count<T extends IPServerCountArgs>(
      args?: Subset<T, IPServerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IPServerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IPServer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPServerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IPServerAggregateArgs>(args: Subset<T, IPServerAggregateArgs>): PrismaPromise<GetIPServerAggregateType<T>>

    /**
     * Group by IPServer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPServerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IPServerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IPServerGroupByArgs['orderBy'] }
        : { orderBy?: IPServerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IPServerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIPServerGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for IPServer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IPServerClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    owner<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * IPServer base type for findUnique actions
   */
  export type IPServerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the IPServer
     * 
    **/
    select?: IPServerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IPServerInclude | null
    /**
     * Filter, which IPServer to fetch.
     * 
    **/
    where: IPServerWhereUniqueInput
  }

  /**
   * IPServer: findUnique
   */
  export interface IPServerFindUniqueArgs extends IPServerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * IPServer base type for findFirst actions
   */
  export type IPServerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the IPServer
     * 
    **/
    select?: IPServerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IPServerInclude | null
    /**
     * Filter, which IPServer to fetch.
     * 
    **/
    where?: IPServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IPServers to fetch.
     * 
    **/
    orderBy?: Enumerable<IPServerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IPServers.
     * 
    **/
    cursor?: IPServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IPServers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IPServers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IPServers.
     * 
    **/
    distinct?: Enumerable<IPServerScalarFieldEnum>
  }

  /**
   * IPServer: findFirst
   */
  export interface IPServerFindFirstArgs extends IPServerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * IPServer findMany
   */
  export type IPServerFindManyArgs = {
    /**
     * Select specific fields to fetch from the IPServer
     * 
    **/
    select?: IPServerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IPServerInclude | null
    /**
     * Filter, which IPServers to fetch.
     * 
    **/
    where?: IPServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IPServers to fetch.
     * 
    **/
    orderBy?: Enumerable<IPServerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IPServers.
     * 
    **/
    cursor?: IPServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IPServers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IPServers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<IPServerScalarFieldEnum>
  }


  /**
   * IPServer create
   */
  export type IPServerCreateArgs = {
    /**
     * Select specific fields to fetch from the IPServer
     * 
    **/
    select?: IPServerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IPServerInclude | null
    /**
     * The data needed to create a IPServer.
     * 
    **/
    data: XOR<IPServerCreateInput, IPServerUncheckedCreateInput>
  }


  /**
   * IPServer createMany
   */
  export type IPServerCreateManyArgs = {
    /**
     * The data used to create many IPServers.
     * 
    **/
    data: Enumerable<IPServerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * IPServer update
   */
  export type IPServerUpdateArgs = {
    /**
     * Select specific fields to fetch from the IPServer
     * 
    **/
    select?: IPServerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IPServerInclude | null
    /**
     * The data needed to update a IPServer.
     * 
    **/
    data: XOR<IPServerUpdateInput, IPServerUncheckedUpdateInput>
    /**
     * Choose, which IPServer to update.
     * 
    **/
    where: IPServerWhereUniqueInput
  }


  /**
   * IPServer updateMany
   */
  export type IPServerUpdateManyArgs = {
    /**
     * The data used to update IPServers.
     * 
    **/
    data: XOR<IPServerUpdateManyMutationInput, IPServerUncheckedUpdateManyInput>
    /**
     * Filter which IPServers to update
     * 
    **/
    where?: IPServerWhereInput
  }


  /**
   * IPServer upsert
   */
  export type IPServerUpsertArgs = {
    /**
     * Select specific fields to fetch from the IPServer
     * 
    **/
    select?: IPServerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IPServerInclude | null
    /**
     * The filter to search for the IPServer to update in case it exists.
     * 
    **/
    where: IPServerWhereUniqueInput
    /**
     * In case the IPServer found by the `where` argument doesn't exist, create a new IPServer with this data.
     * 
    **/
    create: XOR<IPServerCreateInput, IPServerUncheckedCreateInput>
    /**
     * In case the IPServer was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<IPServerUpdateInput, IPServerUncheckedUpdateInput>
  }


  /**
   * IPServer delete
   */
  export type IPServerDeleteArgs = {
    /**
     * Select specific fields to fetch from the IPServer
     * 
    **/
    select?: IPServerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IPServerInclude | null
    /**
     * Filter which IPServer to delete.
     * 
    **/
    where: IPServerWhereUniqueInput
  }


  /**
   * IPServer deleteMany
   */
  export type IPServerDeleteManyArgs = {
    /**
     * Filter which IPServers to delete
     * 
    **/
    where?: IPServerWhereInput
  }


  /**
   * IPServer: findUniqueOrThrow
   */
  export type IPServerFindUniqueOrThrowArgs = IPServerFindUniqueArgsBase
      

  /**
   * IPServer: findFirstOrThrow
   */
  export type IPServerFindFirstOrThrowArgs = IPServerFindFirstArgsBase
      

  /**
   * IPServer without action
   */
  export type IPServerArgs = {
    /**
     * Select specific fields to fetch from the IPServer
     * 
    **/
    select?: IPServerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IPServerInclude | null
  }



  /**
   * Model EmailVerification
   */


  export type AggregateEmailVerification = {
    _count: EmailVerificationCountAggregateOutputType | null
    _min: EmailVerificationMinAggregateOutputType | null
    _max: EmailVerificationMaxAggregateOutputType | null
  }

  export type EmailVerificationMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    salt: string | null
    ip: string | null
    code: string | null
  }

  export type EmailVerificationMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
    salt: string | null
    ip: string | null
    code: string | null
  }

  export type EmailVerificationCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    salt: number
    ip: number
    code: number
    _all: number
  }


  export type EmailVerificationMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    salt?: true
    ip?: true
    code?: true
  }

  export type EmailVerificationMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    salt?: true
    ip?: true
    code?: true
  }

  export type EmailVerificationCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    salt?: true
    ip?: true
    code?: true
    _all?: true
  }

  export type EmailVerificationAggregateArgs = {
    /**
     * Filter which EmailVerification to aggregate.
     * 
    **/
    where?: EmailVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerifications to fetch.
     * 
    **/
    orderBy?: Enumerable<EmailVerificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EmailVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailVerifications
    **/
    _count?: true | EmailVerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailVerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailVerificationMaxAggregateInputType
  }

  export type GetEmailVerificationAggregateType<T extends EmailVerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailVerification[P]>
      : GetScalarType<T[P], AggregateEmailVerification[P]>
  }




  export type EmailVerificationGroupByArgs = {
    where?: EmailVerificationWhereInput
    orderBy?: Enumerable<EmailVerificationOrderByWithAggregationInput>
    by: Array<EmailVerificationScalarFieldEnum>
    having?: EmailVerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailVerificationCountAggregateInputType | true
    _min?: EmailVerificationMinAggregateInputType
    _max?: EmailVerificationMaxAggregateInputType
  }


  export type EmailVerificationGroupByOutputType = {
    id: string
    username: string | null
    email: string | null
    password: string | null
    salt: string | null
    ip: string | null
    code: string | null
    _count: EmailVerificationCountAggregateOutputType | null
    _min: EmailVerificationMinAggregateOutputType | null
    _max: EmailVerificationMaxAggregateOutputType | null
  }

  type GetEmailVerificationGroupByPayload<T extends EmailVerificationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EmailVerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailVerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailVerificationGroupByOutputType[P]>
            : GetScalarType<T[P], EmailVerificationGroupByOutputType[P]>
        }
      >
    >


  export type EmailVerificationSelect = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    salt?: boolean
    ip?: boolean
    code?: boolean
  }

  export type EmailVerificationGetPayload<
    S extends boolean | null | undefined | EmailVerificationArgs,
    U = keyof S
      > = S extends true
        ? EmailVerification
    : S extends undefined
    ? never
    : S extends EmailVerificationArgs | EmailVerificationFindManyArgs
    ?'include' extends U
    ? EmailVerification 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof EmailVerification ? EmailVerification[P] : never
  } 
    : EmailVerification
  : EmailVerification


  type EmailVerificationCountArgs = Merge<
    Omit<EmailVerificationFindManyArgs, 'select' | 'include'> & {
      select?: EmailVerificationCountAggregateInputType | true
    }
  >

  export interface EmailVerificationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one EmailVerification that matches the filter.
     * @param {EmailVerificationFindUniqueArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmailVerificationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EmailVerificationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EmailVerification'> extends True ? CheckSelect<T, Prisma__EmailVerificationClient<EmailVerification>, Prisma__EmailVerificationClient<EmailVerificationGetPayload<T>>> : CheckSelect<T, Prisma__EmailVerificationClient<EmailVerification | null, null>, Prisma__EmailVerificationClient<EmailVerificationGetPayload<T> | null, null>>

    /**
     * Find the first EmailVerification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationFindFirstArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmailVerificationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EmailVerificationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EmailVerification'> extends True ? CheckSelect<T, Prisma__EmailVerificationClient<EmailVerification>, Prisma__EmailVerificationClient<EmailVerificationGetPayload<T>>> : CheckSelect<T, Prisma__EmailVerificationClient<EmailVerification | null, null>, Prisma__EmailVerificationClient<EmailVerificationGetPayload<T> | null, null>>

    /**
     * Find zero or more EmailVerifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailVerifications
     * const emailVerifications = await prisma.emailVerification.findMany()
     * 
     * // Get first 10 EmailVerifications
     * const emailVerifications = await prisma.emailVerification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailVerificationWithIdOnly = await prisma.emailVerification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmailVerificationFindManyArgs>(
      args?: SelectSubset<T, EmailVerificationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<EmailVerification>>, PrismaPromise<Array<EmailVerificationGetPayload<T>>>>

    /**
     * Create a EmailVerification.
     * @param {EmailVerificationCreateArgs} args - Arguments to create a EmailVerification.
     * @example
     * // Create one EmailVerification
     * const EmailVerification = await prisma.emailVerification.create({
     *   data: {
     *     // ... data to create a EmailVerification
     *   }
     * })
     * 
    **/
    create<T extends EmailVerificationCreateArgs>(
      args: SelectSubset<T, EmailVerificationCreateArgs>
    ): CheckSelect<T, Prisma__EmailVerificationClient<EmailVerification>, Prisma__EmailVerificationClient<EmailVerificationGetPayload<T>>>

    /**
     * Create many EmailVerifications.
     *     @param {EmailVerificationCreateManyArgs} args - Arguments to create many EmailVerifications.
     *     @example
     *     // Create many EmailVerifications
     *     const emailVerification = await prisma.emailVerification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmailVerificationCreateManyArgs>(
      args?: SelectSubset<T, EmailVerificationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a EmailVerification.
     * @param {EmailVerificationDeleteArgs} args - Arguments to delete one EmailVerification.
     * @example
     * // Delete one EmailVerification
     * const EmailVerification = await prisma.emailVerification.delete({
     *   where: {
     *     // ... filter to delete one EmailVerification
     *   }
     * })
     * 
    **/
    delete<T extends EmailVerificationDeleteArgs>(
      args: SelectSubset<T, EmailVerificationDeleteArgs>
    ): CheckSelect<T, Prisma__EmailVerificationClient<EmailVerification>, Prisma__EmailVerificationClient<EmailVerificationGetPayload<T>>>

    /**
     * Update one EmailVerification.
     * @param {EmailVerificationUpdateArgs} args - Arguments to update one EmailVerification.
     * @example
     * // Update one EmailVerification
     * const emailVerification = await prisma.emailVerification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmailVerificationUpdateArgs>(
      args: SelectSubset<T, EmailVerificationUpdateArgs>
    ): CheckSelect<T, Prisma__EmailVerificationClient<EmailVerification>, Prisma__EmailVerificationClient<EmailVerificationGetPayload<T>>>

    /**
     * Delete zero or more EmailVerifications.
     * @param {EmailVerificationDeleteManyArgs} args - Arguments to filter EmailVerifications to delete.
     * @example
     * // Delete a few EmailVerifications
     * const { count } = await prisma.emailVerification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmailVerificationDeleteManyArgs>(
      args?: SelectSubset<T, EmailVerificationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailVerifications
     * const emailVerification = await prisma.emailVerification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmailVerificationUpdateManyArgs>(
      args: SelectSubset<T, EmailVerificationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailVerification.
     * @param {EmailVerificationUpsertArgs} args - Arguments to update or create a EmailVerification.
     * @example
     * // Update or create a EmailVerification
     * const emailVerification = await prisma.emailVerification.upsert({
     *   create: {
     *     // ... data to create a EmailVerification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailVerification we want to update
     *   }
     * })
    **/
    upsert<T extends EmailVerificationUpsertArgs>(
      args: SelectSubset<T, EmailVerificationUpsertArgs>
    ): CheckSelect<T, Prisma__EmailVerificationClient<EmailVerification>, Prisma__EmailVerificationClient<EmailVerificationGetPayload<T>>>

    /**
     * Find one EmailVerification that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {EmailVerificationFindUniqueOrThrowArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmailVerificationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EmailVerificationFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__EmailVerificationClient<EmailVerification>, Prisma__EmailVerificationClient<EmailVerificationGetPayload<T>>>

    /**
     * Find the first EmailVerification that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationFindFirstOrThrowArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmailVerificationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EmailVerificationFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__EmailVerificationClient<EmailVerification>, Prisma__EmailVerificationClient<EmailVerificationGetPayload<T>>>

    /**
     * Count the number of EmailVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationCountArgs} args - Arguments to filter EmailVerifications to count.
     * @example
     * // Count the number of EmailVerifications
     * const count = await prisma.emailVerification.count({
     *   where: {
     *     // ... the filter for the EmailVerifications we want to count
     *   }
     * })
    **/
    count<T extends EmailVerificationCountArgs>(
      args?: Subset<T, EmailVerificationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailVerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailVerificationAggregateArgs>(args: Subset<T, EmailVerificationAggregateArgs>): PrismaPromise<GetEmailVerificationAggregateType<T>>

    /**
     * Group by EmailVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailVerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailVerificationGroupByArgs['orderBy'] }
        : { orderBy?: EmailVerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailVerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailVerificationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailVerification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmailVerificationClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * EmailVerification base type for findUnique actions
   */
  export type EmailVerificationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the EmailVerification
     * 
    **/
    select?: EmailVerificationSelect | null
    /**
     * Filter, which EmailVerification to fetch.
     * 
    **/
    where: EmailVerificationWhereUniqueInput
  }

  /**
   * EmailVerification: findUnique
   */
  export interface EmailVerificationFindUniqueArgs extends EmailVerificationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EmailVerification base type for findFirst actions
   */
  export type EmailVerificationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the EmailVerification
     * 
    **/
    select?: EmailVerificationSelect | null
    /**
     * Filter, which EmailVerification to fetch.
     * 
    **/
    where?: EmailVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerifications to fetch.
     * 
    **/
    orderBy?: Enumerable<EmailVerificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailVerifications.
     * 
    **/
    cursor?: EmailVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerifications.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailVerifications.
     * 
    **/
    distinct?: Enumerable<EmailVerificationScalarFieldEnum>
  }

  /**
   * EmailVerification: findFirst
   */
  export interface EmailVerificationFindFirstArgs extends EmailVerificationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EmailVerification findMany
   */
  export type EmailVerificationFindManyArgs = {
    /**
     * Select specific fields to fetch from the EmailVerification
     * 
    **/
    select?: EmailVerificationSelect | null
    /**
     * Filter, which EmailVerifications to fetch.
     * 
    **/
    where?: EmailVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerifications to fetch.
     * 
    **/
    orderBy?: Enumerable<EmailVerificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailVerifications.
     * 
    **/
    cursor?: EmailVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerifications from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerifications.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EmailVerificationScalarFieldEnum>
  }


  /**
   * EmailVerification create
   */
  export type EmailVerificationCreateArgs = {
    /**
     * Select specific fields to fetch from the EmailVerification
     * 
    **/
    select?: EmailVerificationSelect | null
    /**
     * The data needed to create a EmailVerification.
     * 
    **/
    data: XOR<EmailVerificationCreateInput, EmailVerificationUncheckedCreateInput>
  }


  /**
   * EmailVerification createMany
   */
  export type EmailVerificationCreateManyArgs = {
    /**
     * The data used to create many EmailVerifications.
     * 
    **/
    data: Enumerable<EmailVerificationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EmailVerification update
   */
  export type EmailVerificationUpdateArgs = {
    /**
     * Select specific fields to fetch from the EmailVerification
     * 
    **/
    select?: EmailVerificationSelect | null
    /**
     * The data needed to update a EmailVerification.
     * 
    **/
    data: XOR<EmailVerificationUpdateInput, EmailVerificationUncheckedUpdateInput>
    /**
     * Choose, which EmailVerification to update.
     * 
    **/
    where: EmailVerificationWhereUniqueInput
  }


  /**
   * EmailVerification updateMany
   */
  export type EmailVerificationUpdateManyArgs = {
    /**
     * The data used to update EmailVerifications.
     * 
    **/
    data: XOR<EmailVerificationUpdateManyMutationInput, EmailVerificationUncheckedUpdateManyInput>
    /**
     * Filter which EmailVerifications to update
     * 
    **/
    where?: EmailVerificationWhereInput
  }


  /**
   * EmailVerification upsert
   */
  export type EmailVerificationUpsertArgs = {
    /**
     * Select specific fields to fetch from the EmailVerification
     * 
    **/
    select?: EmailVerificationSelect | null
    /**
     * The filter to search for the EmailVerification to update in case it exists.
     * 
    **/
    where: EmailVerificationWhereUniqueInput
    /**
     * In case the EmailVerification found by the `where` argument doesn't exist, create a new EmailVerification with this data.
     * 
    **/
    create: XOR<EmailVerificationCreateInput, EmailVerificationUncheckedCreateInput>
    /**
     * In case the EmailVerification was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EmailVerificationUpdateInput, EmailVerificationUncheckedUpdateInput>
  }


  /**
   * EmailVerification delete
   */
  export type EmailVerificationDeleteArgs = {
    /**
     * Select specific fields to fetch from the EmailVerification
     * 
    **/
    select?: EmailVerificationSelect | null
    /**
     * Filter which EmailVerification to delete.
     * 
    **/
    where: EmailVerificationWhereUniqueInput
  }


  /**
   * EmailVerification deleteMany
   */
  export type EmailVerificationDeleteManyArgs = {
    /**
     * Filter which EmailVerifications to delete
     * 
    **/
    where?: EmailVerificationWhereInput
  }


  /**
   * EmailVerification: findUniqueOrThrow
   */
  export type EmailVerificationFindUniqueOrThrowArgs = EmailVerificationFindUniqueArgsBase
      

  /**
   * EmailVerification: findFirstOrThrow
   */
  export type EmailVerificationFindFirstOrThrowArgs = EmailVerificationFindFirstArgsBase
      

  /**
   * EmailVerification without action
   */
  export type EmailVerificationArgs = {
    /**
     * Select specific fields to fetch from the EmailVerification
     * 
    **/
    select?: EmailVerificationSelect | null
  }



  /**
   * Model ForgotPassword
   */


  export type AggregateForgotPassword = {
    _count: ForgotPasswordCountAggregateOutputType | null
    _min: ForgotPasswordMinAggregateOutputType | null
    _max: ForgotPasswordMaxAggregateOutputType | null
  }

  export type ForgotPasswordMinAggregateOutputType = {
    id: string | null
    email: string | null
    ip: string | null
    code: string | null
  }

  export type ForgotPasswordMaxAggregateOutputType = {
    id: string | null
    email: string | null
    ip: string | null
    code: string | null
  }

  export type ForgotPasswordCountAggregateOutputType = {
    id: number
    email: number
    ip: number
    code: number
    _all: number
  }


  export type ForgotPasswordMinAggregateInputType = {
    id?: true
    email?: true
    ip?: true
    code?: true
  }

  export type ForgotPasswordMaxAggregateInputType = {
    id?: true
    email?: true
    ip?: true
    code?: true
  }

  export type ForgotPasswordCountAggregateInputType = {
    id?: true
    email?: true
    ip?: true
    code?: true
    _all?: true
  }

  export type ForgotPasswordAggregateArgs = {
    /**
     * Filter which ForgotPassword to aggregate.
     * 
    **/
    where?: ForgotPasswordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForgotPasswords to fetch.
     * 
    **/
    orderBy?: Enumerable<ForgotPasswordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ForgotPasswordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForgotPasswords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForgotPasswords.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ForgotPasswords
    **/
    _count?: true | ForgotPasswordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ForgotPasswordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ForgotPasswordMaxAggregateInputType
  }

  export type GetForgotPasswordAggregateType<T extends ForgotPasswordAggregateArgs> = {
        [P in keyof T & keyof AggregateForgotPassword]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateForgotPassword[P]>
      : GetScalarType<T[P], AggregateForgotPassword[P]>
  }




  export type ForgotPasswordGroupByArgs = {
    where?: ForgotPasswordWhereInput
    orderBy?: Enumerable<ForgotPasswordOrderByWithAggregationInput>
    by: Array<ForgotPasswordScalarFieldEnum>
    having?: ForgotPasswordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ForgotPasswordCountAggregateInputType | true
    _min?: ForgotPasswordMinAggregateInputType
    _max?: ForgotPasswordMaxAggregateInputType
  }


  export type ForgotPasswordGroupByOutputType = {
    id: string
    email: string | null
    ip: string | null
    code: string | null
    _count: ForgotPasswordCountAggregateOutputType | null
    _min: ForgotPasswordMinAggregateOutputType | null
    _max: ForgotPasswordMaxAggregateOutputType | null
  }

  type GetForgotPasswordGroupByPayload<T extends ForgotPasswordGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ForgotPasswordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ForgotPasswordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ForgotPasswordGroupByOutputType[P]>
            : GetScalarType<T[P], ForgotPasswordGroupByOutputType[P]>
        }
      >
    >


  export type ForgotPasswordSelect = {
    id?: boolean
    email?: boolean
    ip?: boolean
    code?: boolean
  }

  export type ForgotPasswordGetPayload<
    S extends boolean | null | undefined | ForgotPasswordArgs,
    U = keyof S
      > = S extends true
        ? ForgotPassword
    : S extends undefined
    ? never
    : S extends ForgotPasswordArgs | ForgotPasswordFindManyArgs
    ?'include' extends U
    ? ForgotPassword 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ForgotPassword ? ForgotPassword[P] : never
  } 
    : ForgotPassword
  : ForgotPassword


  type ForgotPasswordCountArgs = Merge<
    Omit<ForgotPasswordFindManyArgs, 'select' | 'include'> & {
      select?: ForgotPasswordCountAggregateInputType | true
    }
  >

  export interface ForgotPasswordDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ForgotPassword that matches the filter.
     * @param {ForgotPasswordFindUniqueArgs} args - Arguments to find a ForgotPassword
     * @example
     * // Get one ForgotPassword
     * const forgotPassword = await prisma.forgotPassword.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ForgotPasswordFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ForgotPasswordFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ForgotPassword'> extends True ? CheckSelect<T, Prisma__ForgotPasswordClient<ForgotPassword>, Prisma__ForgotPasswordClient<ForgotPasswordGetPayload<T>>> : CheckSelect<T, Prisma__ForgotPasswordClient<ForgotPassword | null, null>, Prisma__ForgotPasswordClient<ForgotPasswordGetPayload<T> | null, null>>

    /**
     * Find the first ForgotPassword that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForgotPasswordFindFirstArgs} args - Arguments to find a ForgotPassword
     * @example
     * // Get one ForgotPassword
     * const forgotPassword = await prisma.forgotPassword.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ForgotPasswordFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ForgotPasswordFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ForgotPassword'> extends True ? CheckSelect<T, Prisma__ForgotPasswordClient<ForgotPassword>, Prisma__ForgotPasswordClient<ForgotPasswordGetPayload<T>>> : CheckSelect<T, Prisma__ForgotPasswordClient<ForgotPassword | null, null>, Prisma__ForgotPasswordClient<ForgotPasswordGetPayload<T> | null, null>>

    /**
     * Find zero or more ForgotPasswords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForgotPasswordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ForgotPasswords
     * const forgotPasswords = await prisma.forgotPassword.findMany()
     * 
     * // Get first 10 ForgotPasswords
     * const forgotPasswords = await prisma.forgotPassword.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const forgotPasswordWithIdOnly = await prisma.forgotPassword.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ForgotPasswordFindManyArgs>(
      args?: SelectSubset<T, ForgotPasswordFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ForgotPassword>>, PrismaPromise<Array<ForgotPasswordGetPayload<T>>>>

    /**
     * Create a ForgotPassword.
     * @param {ForgotPasswordCreateArgs} args - Arguments to create a ForgotPassword.
     * @example
     * // Create one ForgotPassword
     * const ForgotPassword = await prisma.forgotPassword.create({
     *   data: {
     *     // ... data to create a ForgotPassword
     *   }
     * })
     * 
    **/
    create<T extends ForgotPasswordCreateArgs>(
      args: SelectSubset<T, ForgotPasswordCreateArgs>
    ): CheckSelect<T, Prisma__ForgotPasswordClient<ForgotPassword>, Prisma__ForgotPasswordClient<ForgotPasswordGetPayload<T>>>

    /**
     * Create many ForgotPasswords.
     *     @param {ForgotPasswordCreateManyArgs} args - Arguments to create many ForgotPasswords.
     *     @example
     *     // Create many ForgotPasswords
     *     const forgotPassword = await prisma.forgotPassword.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ForgotPasswordCreateManyArgs>(
      args?: SelectSubset<T, ForgotPasswordCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ForgotPassword.
     * @param {ForgotPasswordDeleteArgs} args - Arguments to delete one ForgotPassword.
     * @example
     * // Delete one ForgotPassword
     * const ForgotPassword = await prisma.forgotPassword.delete({
     *   where: {
     *     // ... filter to delete one ForgotPassword
     *   }
     * })
     * 
    **/
    delete<T extends ForgotPasswordDeleteArgs>(
      args: SelectSubset<T, ForgotPasswordDeleteArgs>
    ): CheckSelect<T, Prisma__ForgotPasswordClient<ForgotPassword>, Prisma__ForgotPasswordClient<ForgotPasswordGetPayload<T>>>

    /**
     * Update one ForgotPassword.
     * @param {ForgotPasswordUpdateArgs} args - Arguments to update one ForgotPassword.
     * @example
     * // Update one ForgotPassword
     * const forgotPassword = await prisma.forgotPassword.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ForgotPasswordUpdateArgs>(
      args: SelectSubset<T, ForgotPasswordUpdateArgs>
    ): CheckSelect<T, Prisma__ForgotPasswordClient<ForgotPassword>, Prisma__ForgotPasswordClient<ForgotPasswordGetPayload<T>>>

    /**
     * Delete zero or more ForgotPasswords.
     * @param {ForgotPasswordDeleteManyArgs} args - Arguments to filter ForgotPasswords to delete.
     * @example
     * // Delete a few ForgotPasswords
     * const { count } = await prisma.forgotPassword.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ForgotPasswordDeleteManyArgs>(
      args?: SelectSubset<T, ForgotPasswordDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ForgotPasswords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForgotPasswordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ForgotPasswords
     * const forgotPassword = await prisma.forgotPassword.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ForgotPasswordUpdateManyArgs>(
      args: SelectSubset<T, ForgotPasswordUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ForgotPassword.
     * @param {ForgotPasswordUpsertArgs} args - Arguments to update or create a ForgotPassword.
     * @example
     * // Update or create a ForgotPassword
     * const forgotPassword = await prisma.forgotPassword.upsert({
     *   create: {
     *     // ... data to create a ForgotPassword
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ForgotPassword we want to update
     *   }
     * })
    **/
    upsert<T extends ForgotPasswordUpsertArgs>(
      args: SelectSubset<T, ForgotPasswordUpsertArgs>
    ): CheckSelect<T, Prisma__ForgotPasswordClient<ForgotPassword>, Prisma__ForgotPasswordClient<ForgotPasswordGetPayload<T>>>

    /**
     * Find one ForgotPassword that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ForgotPasswordFindUniqueOrThrowArgs} args - Arguments to find a ForgotPassword
     * @example
     * // Get one ForgotPassword
     * const forgotPassword = await prisma.forgotPassword.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ForgotPasswordFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ForgotPasswordFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ForgotPasswordClient<ForgotPassword>, Prisma__ForgotPasswordClient<ForgotPasswordGetPayload<T>>>

    /**
     * Find the first ForgotPassword that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForgotPasswordFindFirstOrThrowArgs} args - Arguments to find a ForgotPassword
     * @example
     * // Get one ForgotPassword
     * const forgotPassword = await prisma.forgotPassword.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ForgotPasswordFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ForgotPasswordFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ForgotPasswordClient<ForgotPassword>, Prisma__ForgotPasswordClient<ForgotPasswordGetPayload<T>>>

    /**
     * Count the number of ForgotPasswords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForgotPasswordCountArgs} args - Arguments to filter ForgotPasswords to count.
     * @example
     * // Count the number of ForgotPasswords
     * const count = await prisma.forgotPassword.count({
     *   where: {
     *     // ... the filter for the ForgotPasswords we want to count
     *   }
     * })
    **/
    count<T extends ForgotPasswordCountArgs>(
      args?: Subset<T, ForgotPasswordCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ForgotPasswordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ForgotPassword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForgotPasswordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ForgotPasswordAggregateArgs>(args: Subset<T, ForgotPasswordAggregateArgs>): PrismaPromise<GetForgotPasswordAggregateType<T>>

    /**
     * Group by ForgotPassword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ForgotPasswordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ForgotPasswordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ForgotPasswordGroupByArgs['orderBy'] }
        : { orderBy?: ForgotPasswordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ForgotPasswordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetForgotPasswordGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ForgotPassword.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ForgotPasswordClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ForgotPassword base type for findUnique actions
   */
  export type ForgotPasswordFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ForgotPassword
     * 
    **/
    select?: ForgotPasswordSelect | null
    /**
     * Filter, which ForgotPassword to fetch.
     * 
    **/
    where: ForgotPasswordWhereUniqueInput
  }

  /**
   * ForgotPassword: findUnique
   */
  export interface ForgotPasswordFindUniqueArgs extends ForgotPasswordFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ForgotPassword base type for findFirst actions
   */
  export type ForgotPasswordFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ForgotPassword
     * 
    **/
    select?: ForgotPasswordSelect | null
    /**
     * Filter, which ForgotPassword to fetch.
     * 
    **/
    where?: ForgotPasswordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForgotPasswords to fetch.
     * 
    **/
    orderBy?: Enumerable<ForgotPasswordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ForgotPasswords.
     * 
    **/
    cursor?: ForgotPasswordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForgotPasswords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForgotPasswords.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ForgotPasswords.
     * 
    **/
    distinct?: Enumerable<ForgotPasswordScalarFieldEnum>
  }

  /**
   * ForgotPassword: findFirst
   */
  export interface ForgotPasswordFindFirstArgs extends ForgotPasswordFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ForgotPassword findMany
   */
  export type ForgotPasswordFindManyArgs = {
    /**
     * Select specific fields to fetch from the ForgotPassword
     * 
    **/
    select?: ForgotPasswordSelect | null
    /**
     * Filter, which ForgotPasswords to fetch.
     * 
    **/
    where?: ForgotPasswordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ForgotPasswords to fetch.
     * 
    **/
    orderBy?: Enumerable<ForgotPasswordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ForgotPasswords.
     * 
    **/
    cursor?: ForgotPasswordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ForgotPasswords from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ForgotPasswords.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ForgotPasswordScalarFieldEnum>
  }


  /**
   * ForgotPassword create
   */
  export type ForgotPasswordCreateArgs = {
    /**
     * Select specific fields to fetch from the ForgotPassword
     * 
    **/
    select?: ForgotPasswordSelect | null
    /**
     * The data needed to create a ForgotPassword.
     * 
    **/
    data: XOR<ForgotPasswordCreateInput, ForgotPasswordUncheckedCreateInput>
  }


  /**
   * ForgotPassword createMany
   */
  export type ForgotPasswordCreateManyArgs = {
    /**
     * The data used to create many ForgotPasswords.
     * 
    **/
    data: Enumerable<ForgotPasswordCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ForgotPassword update
   */
  export type ForgotPasswordUpdateArgs = {
    /**
     * Select specific fields to fetch from the ForgotPassword
     * 
    **/
    select?: ForgotPasswordSelect | null
    /**
     * The data needed to update a ForgotPassword.
     * 
    **/
    data: XOR<ForgotPasswordUpdateInput, ForgotPasswordUncheckedUpdateInput>
    /**
     * Choose, which ForgotPassword to update.
     * 
    **/
    where: ForgotPasswordWhereUniqueInput
  }


  /**
   * ForgotPassword updateMany
   */
  export type ForgotPasswordUpdateManyArgs = {
    /**
     * The data used to update ForgotPasswords.
     * 
    **/
    data: XOR<ForgotPasswordUpdateManyMutationInput, ForgotPasswordUncheckedUpdateManyInput>
    /**
     * Filter which ForgotPasswords to update
     * 
    **/
    where?: ForgotPasswordWhereInput
  }


  /**
   * ForgotPassword upsert
   */
  export type ForgotPasswordUpsertArgs = {
    /**
     * Select specific fields to fetch from the ForgotPassword
     * 
    **/
    select?: ForgotPasswordSelect | null
    /**
     * The filter to search for the ForgotPassword to update in case it exists.
     * 
    **/
    where: ForgotPasswordWhereUniqueInput
    /**
     * In case the ForgotPassword found by the `where` argument doesn't exist, create a new ForgotPassword with this data.
     * 
    **/
    create: XOR<ForgotPasswordCreateInput, ForgotPasswordUncheckedCreateInput>
    /**
     * In case the ForgotPassword was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ForgotPasswordUpdateInput, ForgotPasswordUncheckedUpdateInput>
  }


  /**
   * ForgotPassword delete
   */
  export type ForgotPasswordDeleteArgs = {
    /**
     * Select specific fields to fetch from the ForgotPassword
     * 
    **/
    select?: ForgotPasswordSelect | null
    /**
     * Filter which ForgotPassword to delete.
     * 
    **/
    where: ForgotPasswordWhereUniqueInput
  }


  /**
   * ForgotPassword deleteMany
   */
  export type ForgotPasswordDeleteManyArgs = {
    /**
     * Filter which ForgotPasswords to delete
     * 
    **/
    where?: ForgotPasswordWhereInput
  }


  /**
   * ForgotPassword: findUniqueOrThrow
   */
  export type ForgotPasswordFindUniqueOrThrowArgs = ForgotPasswordFindUniqueArgsBase
      

  /**
   * ForgotPassword: findFirstOrThrow
   */
  export type ForgotPasswordFindFirstOrThrowArgs = ForgotPasswordFindFirstArgsBase
      

  /**
   * ForgotPassword without action
   */
  export type ForgotPasswordArgs = {
    /**
     * Select specific fields to fetch from the ForgotPassword
     * 
    **/
    select?: ForgotPasswordSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const EmailVerificationScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    salt: 'salt',
    ip: 'ip',
    code: 'code'
  };

  export type EmailVerificationScalarFieldEnum = (typeof EmailVerificationScalarFieldEnum)[keyof typeof EmailVerificationScalarFieldEnum]


  export const ForgotPasswordScalarFieldEnum: {
    id: 'id',
    email: 'email',
    ip: 'ip',
    code: 'code'
  };

  export type ForgotPasswordScalarFieldEnum = (typeof ForgotPasswordScalarFieldEnum)[keyof typeof ForgotPasswordScalarFieldEnum]


  export const IPServerScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    created: 'created',
    updated: 'updated',
    nickname: 'nickname',
    ip_address: 'ip_address',
    status: 'status'
  };

  export type IPServerScalarFieldEnum = (typeof IPServerScalarFieldEnum)[keyof typeof IPServerScalarFieldEnum]


  export const KeyScalarFieldEnum: {
    id: 'id',
    subscription: 'subscription',
    key: 'key',
    created: 'created'
  };

  export type KeyScalarFieldEnum = (typeof KeyScalarFieldEnum)[keyof typeof KeyScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    created: 'created',
    auth_token: 'auth_token',
    updated: 'updated',
    email: 'email',
    username: 'username',
    password: 'password',
    subscription: 'subscription',
    salt: 'salt',
    premium_expiry: 'premium_expiry',
    plus_expiry: 'plus_expiry'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    created?: DateTimeFilter | Date | string
    auth_token?: StringFilter | string
    updated?: DateTimeFilter | Date | string
    email?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    subscription?: EnumSubscriptionFilter | Subscription
    salt?: StringNullableFilter | string | null
    ip_servers?: IPServerListRelationFilter
    premium_expiry?: DateTimeNullableFilter | Date | string | null
    plus_expiry?: DateTimeNullableFilter | Date | string | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    created?: SortOrder
    auth_token?: SortOrder
    updated?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    subscription?: SortOrder
    salt?: SortOrder
    ip_servers?: IPServerOrderByRelationAggregateInput
    premium_expiry?: SortOrder
    plus_expiry?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    auth_token?: string
    email?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    created?: SortOrder
    auth_token?: SortOrder
    updated?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    subscription?: SortOrder
    salt?: SortOrder
    premium_expiry?: SortOrder
    plus_expiry?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    created?: DateTimeWithAggregatesFilter | Date | string
    auth_token?: StringWithAggregatesFilter | string
    updated?: DateTimeWithAggregatesFilter | Date | string
    email?: StringNullableWithAggregatesFilter | string | null
    username?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    subscription?: EnumSubscriptionWithAggregatesFilter | Subscription
    salt?: StringNullableWithAggregatesFilter | string | null
    premium_expiry?: DateTimeNullableWithAggregatesFilter | Date | string | null
    plus_expiry?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type KeyWhereInput = {
    AND?: Enumerable<KeyWhereInput>
    OR?: Enumerable<KeyWhereInput>
    NOT?: Enumerable<KeyWhereInput>
    id?: StringFilter | string
    subscription?: EnumSubscriptionFilter | Subscription
    key?: StringFilter | string
    created?: DateTimeFilter | Date | string
  }

  export type KeyOrderByWithRelationInput = {
    id?: SortOrder
    subscription?: SortOrder
    key?: SortOrder
    created?: SortOrder
  }

  export type KeyWhereUniqueInput = {
    id?: string
  }

  export type KeyOrderByWithAggregationInput = {
    id?: SortOrder
    subscription?: SortOrder
    key?: SortOrder
    created?: SortOrder
    _count?: KeyCountOrderByAggregateInput
    _max?: KeyMaxOrderByAggregateInput
    _min?: KeyMinOrderByAggregateInput
  }

  export type KeyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<KeyScalarWhereWithAggregatesInput>
    OR?: Enumerable<KeyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<KeyScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    subscription?: EnumSubscriptionWithAggregatesFilter | Subscription
    key?: StringWithAggregatesFilter | string
    created?: DateTimeWithAggregatesFilter | Date | string
  }

  export type IPServerWhereInput = {
    AND?: Enumerable<IPServerWhereInput>
    OR?: Enumerable<IPServerWhereInput>
    NOT?: Enumerable<IPServerWhereInput>
    id?: StringFilter | string
    ownerId?: StringFilter | string
    created?: DateTimeFilter | Date | string
    updated?: DateTimeFilter | Date | string
    nickname?: StringNullableFilter | string | null
    ip_address?: StringNullableFilter | string | null
    owner?: XOR<UserRelationFilter, UserWhereInput>
    status?: StringFilter | string
  }

  export type IPServerOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    created?: SortOrder
    updated?: SortOrder
    nickname?: SortOrder
    ip_address?: SortOrder
    owner?: UserOrderByWithRelationInput
    status?: SortOrder
  }

  export type IPServerWhereUniqueInput = {
    id?: string
  }

  export type IPServerOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    created?: SortOrder
    updated?: SortOrder
    nickname?: SortOrder
    ip_address?: SortOrder
    status?: SortOrder
    _count?: IPServerCountOrderByAggregateInput
    _max?: IPServerMaxOrderByAggregateInput
    _min?: IPServerMinOrderByAggregateInput
  }

  export type IPServerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<IPServerScalarWhereWithAggregatesInput>
    OR?: Enumerable<IPServerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<IPServerScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    ownerId?: StringWithAggregatesFilter | string
    created?: DateTimeWithAggregatesFilter | Date | string
    updated?: DateTimeWithAggregatesFilter | Date | string
    nickname?: StringNullableWithAggregatesFilter | string | null
    ip_address?: StringNullableWithAggregatesFilter | string | null
    status?: StringWithAggregatesFilter | string
  }

  export type EmailVerificationWhereInput = {
    AND?: Enumerable<EmailVerificationWhereInput>
    OR?: Enumerable<EmailVerificationWhereInput>
    NOT?: Enumerable<EmailVerificationWhereInput>
    id?: StringFilter | string
    username?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    salt?: StringNullableFilter | string | null
    ip?: StringNullableFilter | string | null
    code?: StringNullableFilter | string | null
  }

  export type EmailVerificationOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    ip?: SortOrder
    code?: SortOrder
  }

  export type EmailVerificationWhereUniqueInput = {
    id?: string
  }

  export type EmailVerificationOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    ip?: SortOrder
    code?: SortOrder
    _count?: EmailVerificationCountOrderByAggregateInput
    _max?: EmailVerificationMaxOrderByAggregateInput
    _min?: EmailVerificationMinOrderByAggregateInput
  }

  export type EmailVerificationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EmailVerificationScalarWhereWithAggregatesInput>
    OR?: Enumerable<EmailVerificationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EmailVerificationScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    salt?: StringNullableWithAggregatesFilter | string | null
    ip?: StringNullableWithAggregatesFilter | string | null
    code?: StringNullableWithAggregatesFilter | string | null
  }

  export type ForgotPasswordWhereInput = {
    AND?: Enumerable<ForgotPasswordWhereInput>
    OR?: Enumerable<ForgotPasswordWhereInput>
    NOT?: Enumerable<ForgotPasswordWhereInput>
    id?: StringFilter | string
    email?: StringNullableFilter | string | null
    ip?: StringNullableFilter | string | null
    code?: StringNullableFilter | string | null
  }

  export type ForgotPasswordOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    ip?: SortOrder
    code?: SortOrder
  }

  export type ForgotPasswordWhereUniqueInput = {
    id?: string
  }

  export type ForgotPasswordOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    ip?: SortOrder
    code?: SortOrder
    _count?: ForgotPasswordCountOrderByAggregateInput
    _max?: ForgotPasswordMaxOrderByAggregateInput
    _min?: ForgotPasswordMinOrderByAggregateInput
  }

  export type ForgotPasswordScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ForgotPasswordScalarWhereWithAggregatesInput>
    OR?: Enumerable<ForgotPasswordScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ForgotPasswordScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    ip?: StringNullableWithAggregatesFilter | string | null
    code?: StringNullableWithAggregatesFilter | string | null
  }

  export type UserCreateInput = {
    id?: string
    created?: Date | string
    auth_token?: string
    updated?: Date | string
    email?: string | null
    username?: string | null
    password?: string | null
    subscription?: Subscription
    salt?: string | null
    ip_servers?: IPServerCreateNestedManyWithoutOwnerInput
    premium_expiry?: Date | string | null
    plus_expiry?: Date | string | null
  }

  export type UserUncheckedCreateInput = {
    id?: string
    created?: Date | string
    auth_token?: string
    updated?: Date | string
    email?: string | null
    username?: string | null
    password?: string | null
    subscription?: Subscription
    salt?: string | null
    ip_servers?: IPServerUncheckedCreateNestedManyWithoutOwnerInput
    premium_expiry?: Date | string | null
    plus_expiry?: Date | string | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    auth_token?: StringFieldUpdateOperationsInput | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: EnumSubscriptionFieldUpdateOperationsInput | Subscription
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    ip_servers?: IPServerUpdateManyWithoutOwnerNestedInput
    premium_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plus_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    auth_token?: StringFieldUpdateOperationsInput | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: EnumSubscriptionFieldUpdateOperationsInput | Subscription
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    ip_servers?: IPServerUncheckedUpdateManyWithoutOwnerNestedInput
    premium_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plus_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyInput = {
    id?: string
    created?: Date | string
    auth_token?: string
    updated?: Date | string
    email?: string | null
    username?: string | null
    password?: string | null
    subscription?: Subscription
    salt?: string | null
    premium_expiry?: Date | string | null
    plus_expiry?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    auth_token?: StringFieldUpdateOperationsInput | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: EnumSubscriptionFieldUpdateOperationsInput | Subscription
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    premium_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plus_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    auth_token?: StringFieldUpdateOperationsInput | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: EnumSubscriptionFieldUpdateOperationsInput | Subscription
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    premium_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plus_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KeyCreateInput = {
    id?: string
    subscription?: Subscription
    key?: string
    created?: Date | string
  }

  export type KeyUncheckedCreateInput = {
    id?: string
    subscription?: Subscription
    key?: string
    created?: Date | string
  }

  export type KeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscription?: EnumSubscriptionFieldUpdateOperationsInput | Subscription
    key?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscription?: EnumSubscriptionFieldUpdateOperationsInput | Subscription
    key?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyCreateManyInput = {
    id?: string
    subscription?: Subscription
    key?: string
    created?: Date | string
  }

  export type KeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscription?: EnumSubscriptionFieldUpdateOperationsInput | Subscription
    key?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscription?: EnumSubscriptionFieldUpdateOperationsInput | Subscription
    key?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IPServerCreateInput = {
    id?: string
    created?: Date | string
    updated?: Date | string
    nickname?: string | null
    ip_address?: string | null
    owner: UserCreateNestedOneWithoutIp_serversInput
    status?: string
  }

  export type IPServerUncheckedCreateInput = {
    id?: string
    ownerId: string
    created?: Date | string
    updated?: Date | string
    nickname?: string | null
    ip_address?: string | null
    status?: string
  }

  export type IPServerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    owner?: UserUpdateOneRequiredWithoutIp_serversNestedInput
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IPServerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IPServerCreateManyInput = {
    id?: string
    ownerId: string
    created?: Date | string
    updated?: Date | string
    nickname?: string | null
    ip_address?: string | null
    status?: string
  }

  export type IPServerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IPServerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EmailVerificationCreateInput = {
    id?: string
    username?: string | null
    email?: string | null
    password?: string | null
    salt?: string | null
    ip?: string | null
    code?: string | null
  }

  export type EmailVerificationUncheckedCreateInput = {
    id?: string
    username?: string | null
    email?: string | null
    password?: string | null
    salt?: string | null
    ip?: string | null
    code?: string | null
  }

  export type EmailVerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmailVerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmailVerificationCreateManyInput = {
    id?: string
    username?: string | null
    email?: string | null
    password?: string | null
    salt?: string | null
    ip?: string | null
    code?: string | null
  }

  export type EmailVerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmailVerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ForgotPasswordCreateInput = {
    id?: string
    email?: string | null
    ip?: string | null
    code?: string | null
  }

  export type ForgotPasswordUncheckedCreateInput = {
    id?: string
    email?: string | null
    ip?: string | null
    code?: string | null
  }

  export type ForgotPasswordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ForgotPasswordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ForgotPasswordCreateManyInput = {
    id?: string
    email?: string | null
    ip?: string | null
    code?: string | null
  }

  export type ForgotPasswordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ForgotPasswordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    ip?: NullableStringFieldUpdateOperationsInput | string | null
    code?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumSubscriptionFilter = {
    equals?: Subscription
    in?: Enumerable<Subscription>
    notIn?: Enumerable<Subscription>
    not?: NestedEnumSubscriptionFilter | Subscription
  }

  export type IPServerListRelationFilter = {
    every?: IPServerWhereInput
    some?: IPServerWhereInput
    none?: IPServerWhereInput
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IPServerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    created?: SortOrder
    auth_token?: SortOrder
    updated?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    subscription?: SortOrder
    salt?: SortOrder
    premium_expiry?: SortOrder
    plus_expiry?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    created?: SortOrder
    auth_token?: SortOrder
    updated?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    subscription?: SortOrder
    salt?: SortOrder
    premium_expiry?: SortOrder
    plus_expiry?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    created?: SortOrder
    auth_token?: SortOrder
    updated?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    subscription?: SortOrder
    salt?: SortOrder
    premium_expiry?: SortOrder
    plus_expiry?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumSubscriptionWithAggregatesFilter = {
    equals?: Subscription
    in?: Enumerable<Subscription>
    notIn?: Enumerable<Subscription>
    not?: NestedEnumSubscriptionWithAggregatesFilter | Subscription
    _count?: NestedIntFilter
    _min?: NestedEnumSubscriptionFilter
    _max?: NestedEnumSubscriptionFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type KeyCountOrderByAggregateInput = {
    id?: SortOrder
    subscription?: SortOrder
    key?: SortOrder
    created?: SortOrder
  }

  export type KeyMaxOrderByAggregateInput = {
    id?: SortOrder
    subscription?: SortOrder
    key?: SortOrder
    created?: SortOrder
  }

  export type KeyMinOrderByAggregateInput = {
    id?: SortOrder
    subscription?: SortOrder
    key?: SortOrder
    created?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type IPServerCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    created?: SortOrder
    updated?: SortOrder
    nickname?: SortOrder
    ip_address?: SortOrder
    status?: SortOrder
  }

  export type IPServerMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    created?: SortOrder
    updated?: SortOrder
    nickname?: SortOrder
    ip_address?: SortOrder
    status?: SortOrder
  }

  export type IPServerMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    created?: SortOrder
    updated?: SortOrder
    nickname?: SortOrder
    ip_address?: SortOrder
    status?: SortOrder
  }

  export type EmailVerificationCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    ip?: SortOrder
    code?: SortOrder
  }

  export type EmailVerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    ip?: SortOrder
    code?: SortOrder
  }

  export type EmailVerificationMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    ip?: SortOrder
    code?: SortOrder
  }

  export type ForgotPasswordCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    ip?: SortOrder
    code?: SortOrder
  }

  export type ForgotPasswordMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    ip?: SortOrder
    code?: SortOrder
  }

  export type ForgotPasswordMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    ip?: SortOrder
    code?: SortOrder
  }

  export type IPServerCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<IPServerCreateWithoutOwnerInput>, Enumerable<IPServerUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<IPServerCreateOrConnectWithoutOwnerInput>
    createMany?: IPServerCreateManyOwnerInputEnvelope
    connect?: Enumerable<IPServerWhereUniqueInput>
  }

  export type IPServerUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<IPServerCreateWithoutOwnerInput>, Enumerable<IPServerUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<IPServerCreateOrConnectWithoutOwnerInput>
    createMany?: IPServerCreateManyOwnerInputEnvelope
    connect?: Enumerable<IPServerWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumSubscriptionFieldUpdateOperationsInput = {
    set?: Subscription
  }

  export type IPServerUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<IPServerCreateWithoutOwnerInput>, Enumerable<IPServerUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<IPServerCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<IPServerUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: IPServerCreateManyOwnerInputEnvelope
    set?: Enumerable<IPServerWhereUniqueInput>
    disconnect?: Enumerable<IPServerWhereUniqueInput>
    delete?: Enumerable<IPServerWhereUniqueInput>
    connect?: Enumerable<IPServerWhereUniqueInput>
    update?: Enumerable<IPServerUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<IPServerUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<IPServerScalarWhereInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IPServerUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<IPServerCreateWithoutOwnerInput>, Enumerable<IPServerUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<IPServerCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<IPServerUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: IPServerCreateManyOwnerInputEnvelope
    set?: Enumerable<IPServerWhereUniqueInput>
    disconnect?: Enumerable<IPServerWhereUniqueInput>
    delete?: Enumerable<IPServerWhereUniqueInput>
    connect?: Enumerable<IPServerWhereUniqueInput>
    update?: Enumerable<IPServerUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<IPServerUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<IPServerScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutIp_serversInput = {
    create?: XOR<UserCreateWithoutIp_serversInput, UserUncheckedCreateWithoutIp_serversInput>
    connectOrCreate?: UserCreateOrConnectWithoutIp_serversInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutIp_serversNestedInput = {
    create?: XOR<UserCreateWithoutIp_serversInput, UserUncheckedCreateWithoutIp_serversInput>
    connectOrCreate?: UserCreateOrConnectWithoutIp_serversInput
    upsert?: UserUpsertWithoutIp_serversInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutIp_serversInput, UserUncheckedUpdateWithoutIp_serversInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumSubscriptionFilter = {
    equals?: Subscription
    in?: Enumerable<Subscription>
    notIn?: Enumerable<Subscription>
    not?: NestedEnumSubscriptionFilter | Subscription
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumSubscriptionWithAggregatesFilter = {
    equals?: Subscription
    in?: Enumerable<Subscription>
    notIn?: Enumerable<Subscription>
    not?: NestedEnumSubscriptionWithAggregatesFilter | Subscription
    _count?: NestedIntFilter
    _min?: NestedEnumSubscriptionFilter
    _max?: NestedEnumSubscriptionFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IPServerCreateWithoutOwnerInput = {
    id?: string
    created?: Date | string
    updated?: Date | string
    nickname?: string | null
    ip_address?: string | null
    status?: string
  }

  export type IPServerUncheckedCreateWithoutOwnerInput = {
    id?: string
    created?: Date | string
    updated?: Date | string
    nickname?: string | null
    ip_address?: string | null
    status?: string
  }

  export type IPServerCreateOrConnectWithoutOwnerInput = {
    where: IPServerWhereUniqueInput
    create: XOR<IPServerCreateWithoutOwnerInput, IPServerUncheckedCreateWithoutOwnerInput>
  }

  export type IPServerCreateManyOwnerInputEnvelope = {
    data: Enumerable<IPServerCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type IPServerUpsertWithWhereUniqueWithoutOwnerInput = {
    where: IPServerWhereUniqueInput
    update: XOR<IPServerUpdateWithoutOwnerInput, IPServerUncheckedUpdateWithoutOwnerInput>
    create: XOR<IPServerCreateWithoutOwnerInput, IPServerUncheckedCreateWithoutOwnerInput>
  }

  export type IPServerUpdateWithWhereUniqueWithoutOwnerInput = {
    where: IPServerWhereUniqueInput
    data: XOR<IPServerUpdateWithoutOwnerInput, IPServerUncheckedUpdateWithoutOwnerInput>
  }

  export type IPServerUpdateManyWithWhereWithoutOwnerInput = {
    where: IPServerScalarWhereInput
    data: XOR<IPServerUpdateManyMutationInput, IPServerUncheckedUpdateManyWithoutIp_serversInput>
  }

  export type IPServerScalarWhereInput = {
    AND?: Enumerable<IPServerScalarWhereInput>
    OR?: Enumerable<IPServerScalarWhereInput>
    NOT?: Enumerable<IPServerScalarWhereInput>
    id?: StringFilter | string
    ownerId?: StringFilter | string
    created?: DateTimeFilter | Date | string
    updated?: DateTimeFilter | Date | string
    nickname?: StringNullableFilter | string | null
    ip_address?: StringNullableFilter | string | null
    status?: StringFilter | string
  }

  export type UserCreateWithoutIp_serversInput = {
    id?: string
    created?: Date | string
    auth_token?: string
    updated?: Date | string
    email?: string | null
    username?: string | null
    password?: string | null
    subscription?: Subscription
    salt?: string | null
    premium_expiry?: Date | string | null
    plus_expiry?: Date | string | null
  }

  export type UserUncheckedCreateWithoutIp_serversInput = {
    id?: string
    created?: Date | string
    auth_token?: string
    updated?: Date | string
    email?: string | null
    username?: string | null
    password?: string | null
    subscription?: Subscription
    salt?: string | null
    premium_expiry?: Date | string | null
    plus_expiry?: Date | string | null
  }

  export type UserCreateOrConnectWithoutIp_serversInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutIp_serversInput, UserUncheckedCreateWithoutIp_serversInput>
  }

  export type UserUpsertWithoutIp_serversInput = {
    update: XOR<UserUpdateWithoutIp_serversInput, UserUncheckedUpdateWithoutIp_serversInput>
    create: XOR<UserCreateWithoutIp_serversInput, UserUncheckedCreateWithoutIp_serversInput>
  }

  export type UserUpdateWithoutIp_serversInput = {
    id?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    auth_token?: StringFieldUpdateOperationsInput | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: EnumSubscriptionFieldUpdateOperationsInput | Subscription
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    premium_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plus_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateWithoutIp_serversInput = {
    id?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    auth_token?: StringFieldUpdateOperationsInput | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: EnumSubscriptionFieldUpdateOperationsInput | Subscription
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    premium_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plus_expiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IPServerCreateManyOwnerInput = {
    id?: string
    created?: Date | string
    updated?: Date | string
    nickname?: string | null
    ip_address?: string | null
    status?: string
  }

  export type IPServerUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IPServerUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IPServerUncheckedUpdateManyWithoutIp_serversInput = {
    id?: StringFieldUpdateOperationsInput | string
    created?: DateTimeFieldUpdateOperationsInput | Date | string
    updated?: DateTimeFieldUpdateOperationsInput | Date | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}